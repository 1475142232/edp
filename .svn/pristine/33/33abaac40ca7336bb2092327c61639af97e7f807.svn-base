<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.edp.dao.mapper.FenceInfoPoMapper" >
  <resultMap id="BaseResultMap" type="com.edp.dao.domain.FenceInfoPo" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="fence_name" property="fenceName" jdbcType="VARCHAR" />
    <result column="fence_type" property="fenceType" jdbcType="VARCHAR" />
    <result column="fence_creat" property="fenceCreat" jdbcType="VARCHAR" />
    <result column="fence_creattime" property="fenceCreattime" jdbcType="VARCHAR" />
    <result column="fence_state" property="fenceState" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, fence_name, fence_type, fence_creat, fence_creattime, fence_state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.edp.dao.domain.FenceInfoPoCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fence_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from fence_info
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from fence_info
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.edp.dao.domain.FenceInfoPoCriteria" >
    delete from fence_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.edp.dao.domain.FenceInfoPo" >
    insert into fence_info (id, fence_name, fence_type, 
      fence_creat, fence_creattime, fence_state
      )
    values (#{id,jdbcType=VARCHAR}, #{fenceName,jdbcType=VARCHAR}, #{fenceType,jdbcType=VARCHAR}, 
      #{fenceCreat,jdbcType=VARCHAR}, #{fenceCreattime,jdbcType=VARCHAR}, #{fenceState,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.edp.dao.domain.FenceInfoPo" >
    insert into fence_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="fenceName != null" >
        fence_name,
      </if>
      <if test="fenceType != null" >
        fence_type,
      </if>
      <if test="fenceCreat != null" >
        fence_creat,
      </if>
      <if test="fenceCreattime != null" >
        fence_creattime,
      </if>
      <if test="fenceState != null" >
        fence_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="fenceName != null" >
        #{fenceName,jdbcType=VARCHAR},
      </if>
      <if test="fenceType != null" >
        #{fenceType,jdbcType=VARCHAR},
      </if>
      <if test="fenceCreat != null" >
        #{fenceCreat,jdbcType=VARCHAR},
      </if>
      <if test="fenceCreattime != null" >
        #{fenceCreattime,jdbcType=VARCHAR},
      </if>
      <if test="fenceState != null" >
        #{fenceState,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.edp.dao.domain.FenceInfoPoCriteria" resultType="java.lang.Integer" >
    select count(*) from fence_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update fence_info
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.fenceName != null" >
        fence_name = #{record.fenceName,jdbcType=VARCHAR},
      </if>
      <if test="record.fenceType != null" >
        fence_type = #{record.fenceType,jdbcType=VARCHAR},
      </if>
      <if test="record.fenceCreat != null" >
        fence_creat = #{record.fenceCreat,jdbcType=VARCHAR},
      </if>
      <if test="record.fenceCreattime != null" >
        fence_creattime = #{record.fenceCreattime,jdbcType=VARCHAR},
      </if>
      <if test="record.fenceState != null" >
        fence_state = #{record.fenceState,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update fence_info
    set id = #{record.id,jdbcType=VARCHAR},
      fence_name = #{record.fenceName,jdbcType=VARCHAR},
      fence_type = #{record.fenceType,jdbcType=VARCHAR},
      fence_creat = #{record.fenceCreat,jdbcType=VARCHAR},
      fence_creattime = #{record.fenceCreattime,jdbcType=VARCHAR},
      fence_state = #{record.fenceState,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.edp.dao.domain.FenceInfoPo" >
    update fence_info
    <set >
      <if test="fenceName != null" >
        fence_name = #{fenceName,jdbcType=VARCHAR},
      </if>
      <if test="fenceType != null" >
        fence_type = #{fenceType,jdbcType=VARCHAR},
      </if>
      <if test="fenceCreat != null" >
        fence_creat = #{fenceCreat,jdbcType=VARCHAR},
      </if>
      <if test="fenceCreattime != null" >
        fence_creattime = #{fenceCreattime,jdbcType=VARCHAR},
      </if>
      <if test="fenceState != null" >
        fence_state = #{fenceState,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.edp.dao.domain.FenceInfoPo" >
    update fence_info
    set fence_name = #{fenceName,jdbcType=VARCHAR},
      fence_type = #{fenceType,jdbcType=VARCHAR},
      fence_creat = #{fenceCreat,jdbcType=VARCHAR},
      fence_creattime = #{fenceCreattime,jdbcType=VARCHAR},
      fence_state = #{fenceState,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
    <insert id="insertProduct">
      insert into product_fence (product_id,fence_id)
       values (#{product_id},#{fence_id})
  </insert>
  
  <select id="getAllFence" resultMap="BaseResultMap">
     select * from fence_info f 
     left join product_fence pf on f.id=pf.fence_id
     where f.product_id=#{product_id} and f.fence_state=#{fence_state}
  </select>
</mapper>