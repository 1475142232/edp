package com.edp.admin.taskInfo;

import com.edp.admin.common.BaseController;
import com.edp.common.constant.EDPCodeConstants;
import com.edp.common.utils.DateUtil;
import com.edp.serviceI.bytearrayInfo.ByteArrayInfoServiceI;
import com.edp.serviceI.dto.BytearrayInfoDto;
import com.edp.serviceI.dto.TaskInfoDto;
import com.edp.serviceI.taskInfo.TaskInfoServiceI;
import com.edp.serviceI.taskTrace.TaskTraceServiceI;
import com.edp.serviceI.tree.TreeServiceI;

import com.google.common.collect.Lists;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import java.io.UnsupportedEncodingException;
import java.util.Date;

/**
 * 工单控制类
 * Created by changer on 2016/7/21.
 */
@Controller
@RequestMapping("/taskinfo")
public class TaskInfoController extends BaseController {


    @Resource
    private TaskInfoServiceI taskInfoServiceI;

    @Resource
    private TaskTraceServiceI taskTraceServiceI;
    
	@Autowired
	private TreeServiceI treeServiceI;
	
	@Autowired
	private ByteArrayInfoServiceI byteArrayInfoServiceI;


    /**
     * 工单条件条件查询
     * @param taskInfo
     * @return
     */
    @RequestMapping(value = "/queryTaskInfosByConditon",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto queryTaskInfosByCondition(TaskInfoDto taskInfo){

        return taskInfoServiceI.queryAllTaskInfosByCondition(taskInfo);
    }


    /**
     * 工单保存
     * @param taskInfo
     * @return
     */
    @RequestMapping(value = "/saveTaskInfo",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto saveTaskInfo(TaskInfoDto taskInfo){

        TaskInfoDto rtnDto = new TaskInfoDto();

        if(taskInfo != null){
            taskInfo.setTaskCreateTime(DateUtil.time2String(new Date()));
            rtnDto = taskInfoServiceI.saveTaskInfo(taskInfo);
        }else{
            rtnDto.setReturnCode(EDPCodeConstants.INVALID_DATA_CODE);
            rtnDto.setReturnInfo(EDPCodeConstants.INVALID_DATA_MSG);
        }
        return rtnDto;
    }

    /**
     * 工单更新
     * @param taskInfo
     * @return
     */
    @RequestMapping(value = "/updateTaskInfo",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto updateTaskInfo(TaskInfoDto taskInfo){

        TaskInfoDto rtnDto = new TaskInfoDto();

        if(taskInfo != null){
            taskInfo.setTaskLastModifiedTime(DateUtil.time2String(new Date()));
            rtnDto = taskInfoServiceI.updateTaskInfo(taskInfo);
        }else{
            rtnDto.setReturnCode(EDPCodeConstants.INVALID_DATA_CODE);
            rtnDto.setReturnInfo(EDPCodeConstants.INVALID_DATA_MSG);
        }
        return rtnDto;
    }


    /**
     * 根据主键查询工单信息
     * @param id
     * @return
     */
    @RequestMapping(value = "/findTaskInfoById",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto findTaskInfoById(int id){

        return taskInfoServiceI.findTaskInfoByPrimaryKey(id);
    }


    /**
     * 根据工单编号查询工单信息
     * @param taskId
     * @return
     */
    @RequestMapping(value = "/findTaskInfoByTaskId",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto findTaskInfoByTaskId(String taskId){

        return taskInfoServiceI.findTaskInfoByTaskId(taskId);
    }


    /**
     * 根据产品编号查询工单信息
     * @param productId
     * @return
     */
    @RequestMapping(value = "/findTaskInfoByProductId",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto findTaskInfoByProductId(String productId){

        TaskInfoDto rtnDto = new TaskInfoDto();
        if(StringUtils.isNotEmpty(productId)){
            TaskInfoDto condition = new TaskInfoDto();
            condition.setProductId(productId);
            rtnDto =  taskInfoServiceI.queryAllTaskInfosByCondition(condition);
        }else{
            //暂不处理
        }

        return rtnDto;

    }
    
    /**
     * 工单附件  zhang_cancan 2016/8/7
     * @param taskInfo
     * @param httpSession
     * @return
     */
    @RequestMapping(value = "/addTaskAttachment",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public ResponseEntity addTaskAttachment(String taskId,HttpSession session){
    	TaskInfoDto taskInfo=taskInfoServiceI.findTaskInfoByTaskId(taskId);
    	BytearrayInfoDto bytearrayInfoDto = new BytearrayInfoDto();
    	TaskInfoDto task=(TaskInfoDto)taskInfo.getRows().get(0);
    	bytearrayInfoDto.setFileTargetid(task.getTaskId());
    	try {
    		bytearrayInfoDto=byteArrayInfoServiceI.getFilesByTargetId(bytearrayInfoDto);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	if(bytearrayInfoDto.getRows().size()==0){
    	String tree=treeServiceI.findEnterTreeById((String) session.getAttribute("productId"),task.getTaskVersion());
    	if(task.getTaskType().equals("10")){
    		//前端
    		taskTraceServiceI.addFaceTask(tree,task,(String) session.getAttribute("productId"),task.getTaskVersion());
    	}else if(task.getTaskType().equals("20")){
    		//后台
    		taskTraceServiceI.addConnotationTask(tree,task,(String) session.getAttribute("productId"),task.getTaskVersion());
    	}
    	}	


    	BytearrayInfoDto bytearrayInfo = new BytearrayInfoDto();

        try {
        	bytearrayInfoDto = new BytearrayInfoDto();
        	bytearrayInfoDto.setFileTargetid(task.getTaskId());
        	bytearrayInfo = byteArrayInfoServiceI.getFilesByTargetId(bytearrayInfoDto);
            bytearrayInfo = (BytearrayInfoDto)bytearrayInfo.getRows().get(0);
        } catch (Exception e) {

        }

        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        String fileName = bytearrayInfo.getFileName() + ".doc";
        try {
			httpHeaders.setContentDispositionFormData("attachment", new String(fileName.getBytes("utf-8"), "ISO8859-1"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        httpHeaders.set("charset", "utf-8");


        return new ResponseEntity(bytearrayInfo.getFileBytes(), httpHeaders, HttpStatus.CREATED);
    }

    /**
     * 根据产品编号,计划编号,过滤工单池工单信息
     * @param planId
     * @param productId
     * @return
     */
    @RequestMapping(value = "/queryTaskInfosForPlan",method = {RequestMethod.GET,RequestMethod.POST})
    @ResponseBody
    public TaskInfoDto queryTaskInfosForPlan(String planId,String productId){

        //创建返回对象
        TaskInfoDto rtnDto = new TaskInfoDto();


        if(StringUtils.isNotEmpty(planId) && StringUtils.isNotEmpty(productId)){

            rtnDto = taskInfoServiceI.queryTaskInfosForPlan(planId,productId);

        }else{//输入参数不合法
            rtnDto.setReturnCode(EDPCodeConstants.INVALID_DATA_CODE);
            rtnDto.setReturnInfo(EDPCodeConstants.INVALID_DATA_MSG);
            rtnDto.setResults(0);
            rtnDto.setRows(Lists.newArrayList());
        }

        return rtnDto;
    }
}
