KISSY.add('usermanage-module/src/newuser',function(S,Node, Event,IO,Form,AlertDialog,UserManage, Validator,Select,Data,TreePicker, Tree) {
     function NewUser() {
    	var _this = this;
    	var alertDialog = new AlertDialog();
    	var validator = new Validator();
    	this.renderInformation = function(){
    		_this.initEvent();
			_this.initTree("#orgName","#orgCode","orgController/loadOrgTree.action","0","请选择机构",false);
    	};

		 this.initTree = function (targetId, valueField, url, rootId, rootText, dirSelectable) {

			 //树节点数据，
			 //text : 文本，
			 //id : 节点的id,
			 //leaf ：标示是否叶子节点，可以不提供，根据childern,是否为空判断
			 //expanded ： 是否默认展开

			 var store = new Data.TreeStore({
					 root: {
						 id: rootId,
						 text: rootText
					 },
					 pidField: 'id',
					 url: url/**/
				 }),
			 //由于这个树，不显示根节点，所以可以不指定根节点
				 tree = new Tree.TreeList({
					 store: store,
					 showRoot: true,
					 accordion: true,
					 dirSelectable: dirSelectable,//阻止树节点选中
					 elStyle: {width: '170px', height: '200px'},
					 showLine: true //显示连接线
				 });

			 var picker = new TreePicker({
				 trigger: targetId,
				 valueField: valueField, //如果需要列表返回的value，放在隐藏域，那么指定隐藏域
				 width: 150,  //指定宽度
				 children: [tree] //配置picker内的列表
			 });

			 picker.render();

			 function getFullPath(ev, str) {
				 var s = "";
				 if (ev.level > 1) {
					 s = getFullPath(ev.parent, ev.text);
				 } else {
					 s = ev.text;
				 }

				 return s + " " + str;
			 }

		 }
		 this.initselection = function (targetId, valueField, textField,url) {

			 var store = new Data.Store({
					 url: url,
					 autoLoad: true
				 }),
				 select = new Select.Select({
					 render: targetId,
					 valueField: valueField,
					 multipleSelect: false,
					 store: store
				 });
			 select.render();

			 select.on('change', function (ev) {
				 Node.all(textField).val(ev.item.text);
			 });

			 return select;
		 };



    	this.initEvent = function(){
    		Event.on("#submitUser","click",function(){
    			var userName = Node.all("#userName").val();
    			var userNameAlter = Node.all("#userNameAlter").html();
    			var phoneNumAlter = Node.all("#phoneNumLater").html();
    			if (userName === null || userName === "") {
    				alertDialog.showMessage("用户名不能为空", "1", "")
    			} else if ((userNameAlter != "" && userNameAlter != null && userNameAlter != undefined)
    					|| (phoneNumAlter != "" && phoneNumAlter != null && phoneNumAlter != undefined)) {
    				alertDialog.showMessage("有未通过的验证信息，请重新输入", "1", "")
    			} else {
    				_this.submitForm();
    			}
    			
    		});
    		
    		Event.on("#clearUser","click",function(){
    			_this.clearValues();
    		});
    	};
    	
    	Event.on('#userName', 'keydown', function(){
    		Node.all("#userNameAlter").remove();
    	});
    	
    	Event.on("#phoneNum", "keydown", function(){
    		Node.all("#phoneNumLater").remove();
    	});
    	
    	Event.on("#phoneNum", "blur", function(){
    		if (!validator.validatePhone("phoneNum", "phoneNumLater")) {
    			return;
    		}
    	});
    	
    	Event.on('#userName', 'blur', function(){
    		if (validator.validateUserName("userName", "userNameAlter")) {
    			if (!_this.checkUserName(Node.all("#userName").val())) {
    				Node.all("#userNameAlter").remove();
    				Node.all("#userName").parent().append(newErrorMsg("userNameAlter",'用户名已经存在'));
    				Node.all("#userName").val('');
    				return;
    			}
    		} else {
    			return;
    		}
    	});
	    
    	this.checkUserName = function(userName) {
    		var returnVal = true;
    		var url = 'userManageController/getUserList.action';
    		var data = {userName:userName};
    		IO({
				url: url,
				type: "post",
				data : data,
				dataType : 'json',
				cache : false,
				async : false,
				success: function(data){
					if (data !== null && data !== "") {
						if (data.results > 0) {
							returnVal = false;
						} else {
							returnVal = true;
						}
					}
					
				},
				error: function(XMLHttpRequest, textStatus, errorThrown){
				}
			});
    		return returnVal;
    	};
    	
    	this.submitForm = function(){
    		var url = 'userManageController/addUser.action';
    		var data = _this.getValues();
    		IO({
				url: url,
				type: "post",
				data : data,
				dataType : 'json',
				cache : false,
				success: function(data){
					
					alertDialog.showConfirmMessage("用户添加成功 ！", _this.callback_success, 4, _this.callback_fail,"继续添加","返回查询列表");
				},
				error: function(XMLHttpRequest, textStatus, errorThrown){
				}
			});
    	};
    	
    	this.callback_success = function(){
    		_this.clearValues();
    	};
    	
    	this.callback_fail = function(){
    		IO.get("views/usermanage/userManage.html",null,function(){
		    		Node.all("#contentright").html(arguments[0], true);
		    		var userManage = new UserManage();
		    		userManage.init("search");
		    	},"html");
    	};
    	this.clearValues = function(){
    		Node.all("#userName").val("");
    		Node.all("#realName").val("");
    		Node.all("#orgCode").val("");
    		Node.all("#orgName").val("");
    		Node.all("#phoneNum").val("");
    		Node.all("#userNameAlter").remove();
    		Node.all("#phoneNumLater").remove();
    	};
    	
    	this.getValues = function(){
    		var vForm = new Form.HForm({
				srcNode : '#userForm'
			}).render();
			var data = vForm.serializeToObject();

			var roleId = Node.all("#roleId").val();
			if(roleId == 1){
				data["roleName"] = "超级管理员";
			}else if(roleId == 2){
				data["roleName"] = "普通管理员";
			}else{
				data["roleName"] = "普通操作员";
			}
    		return data;
    	};

     }; 
    return NewUser;
}, {
	requires : ['node', 
	            'event', 
	            'io',
	            'bui/form',
	            'common-module/src/alertDialog',
	            'usermanage-module/src/userManage',
	            'common-module/src/validator',
		'bui/select',
		'bui/data',
		'bui/extensions/treepicker',
		'bui/tree'
	]
});